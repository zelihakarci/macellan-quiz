{"version":3,"sources":["useCarouselController.tsx"],"names":["React","runOnJS","withTiming","useCarouselController","opts","width","loop","handlerOffsetX","timingConfig","lockController","indexController","disable","canSliding","useCallback","isLock","onScrollEnd","unLock","onScrollBegin","lock","next","index","value","length","isFinished","prev","to","animated","offset"],"mappings":"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","sourcesContent":["import React from 'react';\nimport type Animated from 'react-native-reanimated';\nimport { runOnJS, withTiming } from 'react-native-reanimated';\nimport type { IIndexController } from './useIndexController';\nimport type { ILockController } from './useLock';\n\ninterface IOpts {\n    loop: boolean;\n    width: number;\n    handlerOffsetX: Animated.SharedValue<number>;\n    lockController: ILockController;\n    indexController: IIndexController;\n    timingConfig: Animated.WithTimingConfig;\n    disable?: boolean;\n    onScrollBegin?: () => void;\n    onScrollEnd?: () => void;\n}\n\nexport interface ICarouselController {\n    prev: () => void;\n    next: () => void;\n    to: (index: number, animated?: boolean) => void;\n}\n\nexport function useCarouselController(opts: IOpts): ICarouselController {\n    const {\n        width,\n        loop,\n        handlerOffsetX,\n        timingConfig,\n        lockController,\n        indexController,\n        disable = false,\n    } = opts;\n\n    const canSliding = React.useCallback(() => {\n        return !disable && !lockController.isLock();\n    }, [lockController, disable]);\n\n    const onScrollEnd = React.useCallback(() => {\n        lockController.unLock();\n        opts.onScrollEnd?.();\n    }, [lockController, opts]);\n\n    const onScrollBegin = React.useCallback(() => {\n        opts.onScrollBegin?.();\n        lockController.lock();\n    }, [lockController, opts]);\n\n    const next = React.useCallback(() => {\n        if (\n            !canSliding() ||\n            (!loop &&\n                indexController.index.value === indexController.length - 1)\n        )\n            return;\n\n        onScrollBegin?.();\n\n        handlerOffsetX.value = withTiming(\n            handlerOffsetX.value - width,\n            timingConfig,\n            (isFinished: boolean) => {\n                if (isFinished) {\n                    runOnJS(onScrollEnd)();\n                }\n            }\n        );\n    }, [\n        onScrollEnd,\n        canSliding,\n        onScrollBegin,\n        width,\n        timingConfig,\n        handlerOffsetX,\n        indexController,\n        loop,\n    ]);\n\n    const prev = React.useCallback(() => {\n        if (!canSliding() || (!loop && indexController.index.value === 0))\n            return;\n\n        onScrollBegin?.();\n\n        handlerOffsetX.value = withTiming(\n            handlerOffsetX.value + width,\n            timingConfig,\n            (isFinished: boolean) => {\n                if (isFinished) {\n                    runOnJS(onScrollEnd)();\n                }\n            }\n        );\n    }, [\n        onScrollEnd,\n        canSliding,\n        onScrollBegin,\n        width,\n        timingConfig,\n        handlerOffsetX,\n        indexController,\n        loop,\n    ]);\n\n    const to = React.useCallback(\n        (index: number, animated: boolean = false) => {\n            if (index === indexController.index.value) return;\n            if (!canSliding()) return;\n\n            onScrollBegin?.();\n\n            const offset =\n                handlerOffsetX.value +\n                (indexController.index.value - index) * width;\n\n            if (animated) {\n                handlerOffsetX.value = withTiming(\n                    offset,\n                    timingConfig,\n                    (isFinished: boolean) => {\n                        indexController.index.value = index;\n                        if (isFinished) {\n                            runOnJS(onScrollEnd)();\n                        }\n                    }\n                );\n            } else {\n                handlerOffsetX.value = offset;\n                indexController.index.value = index;\n                runOnJS(onScrollEnd)();\n            }\n        },\n        [\n            canSliding,\n            onScrollBegin,\n            onScrollEnd,\n            width,\n            timingConfig,\n            indexController,\n            handlerOffsetX,\n        ]\n    );\n\n    return {\n        next,\n        prev,\n        to,\n    };\n}\n"]}