{"version":3,"sources":["ParallaxLayout.tsx"],"names":["React","View","Animated","Extrapolate","interpolate","useAnimatedStyle","useOffsetX","ParallaxLayout","props","handlerOffsetX","parallaxScrollingOffset","parallaxScrollingScale","index","width","loop","children","computedAnimResult","x","offsetXStyle","baseTranslateX","value","padding","extraOffset","zIndex","CLAMP","scale","relatedTranslateX","transform","translateX","height","alignSelf","flex"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,OAAOC,QAAP,IACIC,WADJ,EAEIC,WAFJ,EAGIC,gBAHJ,QAIO,yBAJP;AAMA,SAASC,UAAT,QAA2B,eAA3B;AAEA,OAAO,MAAMC,cAQX,GAAIC,KAAD,IAAW;AACZ,QAAM;AACFC,IAAAA,cADE;AAEFC,IAAAA,uBAAuB,GAAG,GAFxB;AAGFC,IAAAA,sBAAsB,GAAG,GAHvB;AAIFC,IAAAA,KAJE;AAKFC,IAAAA,KALE;AAMFC,IAAAA,IANE;AAOFC,IAAAA,QAPE;AAQFC,IAAAA;AARE,MASFR,KATJ;AAWA,QAAMS,CAAC,GAAGX,UAAU,CAAC;AACjBG,IAAAA,cADiB;AAEjBG,IAAAA,KAFiB;AAGjBC,IAAAA,KAHiB;AAIjBG,IAAAA,kBAJiB;AAKjBF,IAAAA;AALiB,GAAD,CAApB;AAQA,QAAMI,YAAY,GAAGb,gBAAgB,CAAC,MAAM;AACxC,UAAMc,cAAc,GAAGF,CAAC,CAACG,KAAF,GAAUR,KAAK,GAAGC,KAAzC;AACA,UAAMQ,OAAO,GAAG,CAAC,IAAIV,sBAAL,IAA+BE,KAA/C;AACA,UAAMS,WAAW,GAAGV,KAAK,GAAGS,OAAR,GAAkBA,OAAO,GAAG,CAAhD;AAEA,UAAME,MAAM,GAAGnB,WAAW,CACtBa,CAAC,CAACG,KADoB,EAEtB,CAAC,CAACP,KAAF,EAAS,CAAT,EAAYA,KAAZ,CAFsB,EAGtB,CAAC,CAAD,EAAIA,KAAJ,EAAW,CAAX,CAHsB,EAItBV,WAAW,CAACqB,KAJU,CAA1B;AAMA,UAAMC,KAAK,GAAGrB,WAAW,CACrBa,CAAC,CAACG,KADmB,EAErB,CAAC,CAACP,KAAF,EAAS,CAAT,EAAYA,KAAZ,CAFqB,EAGrB,CAACF,sBAAD,EAAyB,CAAzB,EAA4BA,sBAA5B,CAHqB,EAIrBR,WAAW,CAACqB,KAJS,CAAzB;AAMA,UAAME,iBAAiB,GAAGtB,WAAW,CACjCa,CAAC,CAACG,KAD+B,EAEjC,CAAC,CAACP,KAAF,EAAS,CAAT,EAAYA,KAAZ,CAFiC,EAGjC,CAACH,uBAAD,EAA0B,CAA1B,EAA6B,CAACA,uBAA9B,CAHiC,EAIjCP,WAAW,CAACqB,KAJqB,CAArC;AAMA,WAAO;AACHG,MAAAA,SAAS,EAAE,CACP;AACIC,QAAAA,UAAU,EACNT,cAAc,GAAGG,WAAjB,GAA+BI;AAFvC,OADO,EAKP;AAAED,QAAAA;AAAF,OALO,CADR;AAQHF,MAAAA;AARG,KAAP;AAUH,GAjCoC,EAiClC,CAACT,IAAD,CAjCkC,CAArC;AAmCA,sBACI,oBAAC,QAAD,CAAU,IAAV;AACI,IAAA,KAAK,EAAE,CACH;AACID,MAAAA,KAAK,EAAG,GAAEF,sBAAsB,GAAG,GAAI,GAD3C;AAEIkB,MAAAA,MAAM,EAAG,GAAElB,sBAAsB,GAAG,GAAI,GAF5C;AAGImB,MAAAA,SAAS,EAAE;AAHf,KADG,EAMHZ,YANG;AADX,kBAUI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEa,MAAAA,IAAI,EAAE;AAAR;AAAb,KAA2BhB,QAA3B,CAVJ,CADJ;AAcH,CA7EM","sourcesContent":["/* eslint-disable react-native/no-inline-styles */\nimport React from 'react';\nimport { View } from 'react-native';\nimport Animated, {\n    Extrapolate,\n    interpolate,\n    useAnimatedStyle,\n} from 'react-native-reanimated';\nimport type { IComputedAnimResult } from 'src/useComputedAnim';\nimport { useOffsetX } from '../useOffsetX';\n\nexport const ParallaxLayout: React.FC<{\n    loop?: boolean;\n    parallaxScrollingOffset?: number;\n    parallaxScrollingScale?: number;\n    handlerOffsetX: Animated.SharedValue<number>;\n    index: number;\n    width: number;\n    computedAnimResult: IComputedAnimResult;\n}> = (props) => {\n    const {\n        handlerOffsetX,\n        parallaxScrollingOffset = 100,\n        parallaxScrollingScale = 0.8,\n        index,\n        width,\n        loop,\n        children,\n        computedAnimResult,\n    } = props;\n\n    const x = useOffsetX({\n        handlerOffsetX,\n        index,\n        width,\n        computedAnimResult,\n        loop,\n    });\n\n    const offsetXStyle = useAnimatedStyle(() => {\n        const baseTranslateX = x.value - index * width;\n        const padding = (1 - parallaxScrollingScale) * width;\n        const extraOffset = index * padding + padding / 2;\n\n        const zIndex = interpolate(\n            x.value,\n            [-width, 0, width],\n            [0, width, 0],\n            Extrapolate.CLAMP\n        );\n        const scale = interpolate(\n            x.value,\n            [-width, 0, width],\n            [parallaxScrollingScale, 1, parallaxScrollingScale],\n            Extrapolate.CLAMP\n        );\n        const relatedTranslateX = interpolate(\n            x.value,\n            [-width, 0, width],\n            [parallaxScrollingOffset, 0, -parallaxScrollingOffset],\n            Extrapolate.CLAMP\n        );\n        return {\n            transform: [\n                {\n                    translateX:\n                        baseTranslateX + extraOffset + relatedTranslateX,\n                },\n                { scale },\n            ],\n            zIndex,\n        };\n    }, [loop]);\n\n    return (\n        <Animated.View\n            style={[\n                {\n                    width: `${parallaxScrollingScale * 100}%`,\n                    height: `${parallaxScrollingScale * 100}%`,\n                    alignSelf: 'center',\n                },\n                offsetXStyle,\n            ]}\n        >\n            <View style={{ flex: 1 }}>{children}</View>\n        </Animated.View>\n    );\n};\n"]}