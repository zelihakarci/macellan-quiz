import React from 'react';
import { runOnJS, withTiming } from 'react-native-reanimated';
export function useCarouselController(opts) {
  const {
    width,
    loop,
    handlerOffsetX,
    timingConfig,
    lockController,
    indexController,
    disable = false
  } = opts;
  const canSliding = React.useCallback(() => {
    return !disable && !lockController.isLock();
  }, [lockController, disable]);
  const onScrollEnd = React.useCallback(() => {
    var _opts$onScrollEnd;

    lockController.unLock();
    (_opts$onScrollEnd = opts.onScrollEnd) === null || _opts$onScrollEnd === void 0 ? void 0 : _opts$onScrollEnd.call(opts);
  }, [lockController, opts]);
  const onScrollBegin = React.useCallback(() => {
    var _opts$onScrollBegin;

    (_opts$onScrollBegin = opts.onScrollBegin) === null || _opts$onScrollBegin === void 0 ? void 0 : _opts$onScrollBegin.call(opts);
    lockController.lock();
  }, [lockController, opts]);
  const next = React.useCallback(() => {
    if (!canSliding() || !loop && indexController.index.value === indexController.length - 1) return;
    onScrollBegin === null || onScrollBegin === void 0 ? void 0 : onScrollBegin();
    handlerOffsetX.value = withTiming(handlerOffsetX.value - width, timingConfig, isFinished => {
      if (isFinished) {
        runOnJS(onScrollEnd)();
      }
    });
  }, [onScrollEnd, canSliding, onScrollBegin, width, timingConfig, handlerOffsetX, indexController, loop]);
  const prev = React.useCallback(() => {
    if (!canSliding() || !loop && indexController.index.value === 0) return;
    onScrollBegin === null || onScrollBegin === void 0 ? void 0 : onScrollBegin();
    handlerOffsetX.value = withTiming(handlerOffsetX.value + width, timingConfig, isFinished => {
      if (isFinished) {
        runOnJS(onScrollEnd)();
      }
    });
  }, [onScrollEnd, canSliding, onScrollBegin, width, timingConfig, handlerOffsetX, indexController, loop]);
  const to = React.useCallback((index, animated = false) => {
    if (index === indexController.index.value) return;
    if (!canSliding()) return;
    onScrollBegin === null || onScrollBegin === void 0 ? void 0 : onScrollBegin();
    const offset = handlerOffsetX.value + (indexController.index.value - index) * width;

    if (animated) {
      handlerOffsetX.value = withTiming(offset, timingConfig, isFinished => {
        indexController.index.value = index;

        if (isFinished) {
          runOnJS(onScrollEnd)();
        }
      });
    } else {
      handlerOffsetX.value = offset;
      indexController.index.value = index;
      runOnJS(onScrollEnd)();
    }
  }, [canSliding, onScrollBegin, onScrollEnd, width, timingConfig, indexController, handlerOffsetX]);
  return {
    next,
    prev,
    to
  };
}
//# sourceMappingURL=useCarouselController.js.map