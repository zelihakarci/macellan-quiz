{"version":3,"sources":["useIndexController.ts"],"names":["useIndexController","opts","originalLength","length","width","loop","handlerOffsetX","onChange","index","sharedIndex","React","useRef","sharedPreIndex","convertToSharedIndex","useCallback","i","computedIndex","current","toInt","value","Math","abs","_sharedIndex"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAUO,SAASA,kBAAT,CAA4BC,IAA5B,EAQc;AACjB,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,MAAlB;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA,IAAjC;AAAuCC,IAAAA,cAAvC;AAAuDC,IAAAA;AAAvD,MACFN,IADJ;AAEA,QAAMO,KAAK,GAAG,2CAAuB,CAAvB,CAAd,CAHiB,CAIjB;;AACA,QAAMC,WAAW,GAAGC,KAAK,CAACC,MAAN,CAAqB,CAArB,CAApB;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACC,MAAN,CAAqB,CAArB,CAAvB;AAEA,QAAME,oBAAoB,GAAGH,KAAK,CAACI,WAAN,CACxBC,CAAD,IAAe;AACX,QAAIV,IAAJ,EAAU;AACN,cAAQH,cAAR;AACI,aAAK,CAAL;AACI,iBAAO,CAAP;;AACJ,aAAK,CAAL;AACI,iBAAOa,CAAC,GAAG,CAAX;AAJR;AAMH;;AACD,WAAOA,CAAP;AACH,GAXwB,EAYzB,CAACb,cAAD,EAAiBG,IAAjB,CAZyB,CAA7B;AAeA,QAAMW,aAAa,GAAGN,KAAK,CAACI,WAAN,CAAkB,MAAM;AAC1CF,IAAAA,cAAc,CAACK,OAAf,GAAyBR,WAAW,CAACQ,OAArC;AACA,UAAMC,KAAK,GAAIZ,cAAc,CAACa,KAAf,GAAuBf,KAAxB,GAAiCD,MAA/C;AACA,UAAMY,CAAC,GACHT,cAAc,CAACa,KAAf,IAAwB,CAAxB,GACMC,IAAI,CAACC,GAAL,CAASH,KAAT,CADN,GAEME,IAAI,CAACC,GAAL,CAASH,KAAK,GAAG,CAAR,GAAYf,MAAM,GAAGe,KAArB,GAA6B,CAAtC,CAHV;AAIAV,IAAAA,KAAK,CAACW,KAAN,GAAcJ,CAAd;;AACA,UAAMO,YAAY,GAAGT,oBAAoB,CAACE,CAAD,CAAzC;;AACAN,IAAAA,WAAW,CAACQ,OAAZ,GAAsBK,YAAtB;AACAf,IAAAA,QAAQ,CAACe,YAAD,CAAR;AACH,GAXqB,EAWnB,CACCnB,MADD,EAECG,cAFD,EAGCM,cAHD,EAICJ,KAJD,EAKCJ,KALD,EAMCK,WAND,EAOCI,oBAPD,EAQCN,QARD,CAXmB,CAAtB;AAsBA,SAAO;AAAEJ,IAAAA,MAAF;AAAUK,IAAAA,KAAV;AAAiBI,IAAAA,cAAjB;AAAiCH,IAAAA,WAAjC;AAA8CO,IAAAA;AAA9C,GAAP;AACH","sourcesContent":["import * as React from 'react';\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport interface IIndexController {\n    length: number;\n    sharedPreIndex: React.MutableRefObject<number>;\n    sharedIndex: React.MutableRefObject<number>;\n    index: Animated.SharedValue<number>;\n    computedIndex: () => void;\n}\n\nexport function useIndexController(opts: {\n    handlerOffsetX: Animated.SharedValue<number>;\n    loop: boolean;\n    // the length before fill data\n    originalLength: number;\n    length: number;\n    width: number;\n    onChange: (index: number) => void;\n}): IIndexController {\n    const { originalLength, length, width, loop, handlerOffsetX, onChange } =\n        opts;\n    const index = useSharedValue<number>(0);\n    // The Index displayed to the user\n    const sharedIndex = React.useRef<number>(0);\n    const sharedPreIndex = React.useRef<number>(0);\n\n    const convertToSharedIndex = React.useCallback(\n        (i: number) => {\n            if (loop) {\n                switch (originalLength) {\n                    case 1:\n                        return 0;\n                    case 2:\n                        return i % 2;\n                }\n            }\n            return i;\n        },\n        [originalLength, loop]\n    );\n\n    const computedIndex = React.useCallback(() => {\n        sharedPreIndex.current = sharedIndex.current;\n        const toInt = (handlerOffsetX.value / width) % length;\n        const i =\n            handlerOffsetX.value <= 0\n                ? Math.abs(toInt)\n                : Math.abs(toInt > 0 ? length - toInt : 0);\n        index.value = i;\n        const _sharedIndex = convertToSharedIndex(i);\n        sharedIndex.current = _sharedIndex;\n        onChange(_sharedIndex);\n    }, [\n        length,\n        handlerOffsetX,\n        sharedPreIndex,\n        index,\n        width,\n        sharedIndex,\n        convertToSharedIndex,\n        onChange,\n    ]);\n\n    return { length, index, sharedPreIndex, sharedIndex, computedIndex };\n}\n"]}