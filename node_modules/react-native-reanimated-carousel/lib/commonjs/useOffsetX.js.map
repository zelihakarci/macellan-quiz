{"version":3,"sources":["useOffsetX.ts"],"names":["useOffsetX","opts","handlerOffsetX","index","width","computedAnimResult","loop","MAX","WL","MIN","LENGTH","x","Wi","startPos","inputRange","outputRange","value","Extrapolate","CLAMP"],"mappings":";;;;;;;AAAA;;AAeO,MAAMA,UAAU,GAAIC,IAAD,IAAiB;AACvC,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,KAAlB;AAAyBC,IAAAA,KAAzB;AAAgCC,IAAAA,kBAAhC;AAAoDC,IAAAA;AAApD,MAA6DL,IAAnE;AACA,QAAM;AAAEM,IAAAA,GAAF;AAAOC,IAAAA,EAAP;AAAWC,IAAAA,GAAX;AAAgBC,IAAAA;AAAhB,MAA2BL,kBAAjC;AACA,QAAMM,CAAC,GAAG,4CAAgB,MAAM;AAC5B,QAAIL,IAAJ,EAAU;AACN,YAAMM,EAAE,GAAGR,KAAK,GAAGD,KAAnB;AACA,YAAMU,QAAQ,GAAGD,EAAE,GAAGL,GAAL,GAAWA,GAAG,GAAGK,EAAjB,GAAsBA,EAAE,GAAGH,GAAL,GAAWA,GAAG,GAAGG,EAAjB,GAAsBA,EAA7D;AACA,YAAME,UAAU,GAAG,CACf,CAACN,EADc,EAEf,EAAE,CAACE,MAAM,GAAG,CAAV,IAAeN,KAAf,GAAuBA,KAAK,GAAG,CAAjC,IAAsCS,QAAtC,GAAiD,CAFlC,EAGf,EAAE,CAACH,MAAM,GAAG,CAAV,IAAeN,KAAf,GAAuBA,KAAK,GAAG,CAAjC,IAAsCS,QAHvB,EAIf,CAJe,EAKf,CAACH,MAAM,GAAG,CAAV,IAAeN,KAAf,GAAuBA,KAAK,GAAG,CAA/B,GAAmCS,QALpB,EAMf,CAACH,MAAM,GAAG,CAAV,IAAeN,KAAf,GAAuBA,KAAK,GAAG,CAA/B,GAAmCS,QAAnC,GAA8C,CAN/B,EAOfL,EAPe,CAAnB;AASA,YAAMO,WAAW,GAAG,CAChBF,QADgB,EAEhB,MAAMT,KAAN,GAAc,CAFE,EAGhB,EAAE,CAACM,MAAM,GAAG,CAAV,IAAeN,KAAf,GAAuBA,KAAK,GAAG,CAAjC,CAHgB,EAIhBS,QAJgB,EAKhB,CAACH,MAAM,GAAG,CAAV,IAAeN,KAAf,GAAuBA,KAAK,GAAG,CALf,EAMhB,EAAE,MAAMA,KAAN,GAAc,CAAhB,CANgB,EAOhBS,QAPgB,CAApB;AASA,aAAO,wCACHX,cAAc,CAACc,KADZ,EAEHF,UAFG,EAGHC,WAHG,EAIHE,mCAAYC,KAJT,CAAP;AAMH;;AAED,UAAML,QAAQ,GAAGT,KAAK,GAAGD,KAAzB;AACA,WAAOD,cAAc,CAACc,KAAf,GAAuBH,QAA9B;AACH,GAhCS,EAgCP,CAACP,IAAD,CAhCO,CAAV;AAiCA,SAAOK,CAAP;AACH,CArCM","sourcesContent":["import Animated, {\n    Extrapolate,\n    interpolate,\n    useDerivedValue,\n} from 'react-native-reanimated';\nimport type { IComputedAnimResult } from './useComputedAnim';\n\ninterface IOpts {\n    index: number;\n    width: number;\n    computedAnimResult: IComputedAnimResult;\n    handlerOffsetX: Animated.SharedValue<number>;\n    loop?: boolean;\n}\n\nexport const useOffsetX = (opts: IOpts) => {\n    const { handlerOffsetX, index, width, computedAnimResult, loop } = opts;\n    const { MAX, WL, MIN, LENGTH } = computedAnimResult;\n    const x = useDerivedValue(() => {\n        if (loop) {\n            const Wi = width * index;\n            const startPos = Wi > MAX ? MAX - Wi : Wi < MIN ? MIN - Wi : Wi;\n            const inputRange = [\n                -WL,\n                -((LENGTH - 2) * width + width / 2) - startPos - 1,\n                -((LENGTH - 2) * width + width / 2) - startPos,\n                0,\n                (LENGTH - 2) * width + width / 2 - startPos,\n                (LENGTH - 2) * width + width / 2 - startPos + 1,\n                WL,\n            ];\n            const outputRange = [\n                startPos,\n                1.5 * width - 1,\n                -((LENGTH - 2) * width + width / 2),\n                startPos,\n                (LENGTH - 2) * width + width / 2,\n                -(1.5 * width - 1),\n                startPos,\n            ];\n            return interpolate(\n                handlerOffsetX.value,\n                inputRange,\n                outputRange,\n                Extrapolate.CLAMP\n            );\n        }\n\n        const startPos = width * index;\n        return handlerOffsetX.value + startPos;\n    }, [loop]);\n    return x;\n};\n"]}