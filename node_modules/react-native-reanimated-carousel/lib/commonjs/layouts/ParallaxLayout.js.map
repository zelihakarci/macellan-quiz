{"version":3,"sources":["ParallaxLayout.tsx"],"names":["ParallaxLayout","props","handlerOffsetX","parallaxScrollingOffset","parallaxScrollingScale","index","width","loop","children","computedAnimResult","x","offsetXStyle","baseTranslateX","value","padding","extraOffset","zIndex","Extrapolate","CLAMP","scale","relatedTranslateX","transform","translateX","height","alignSelf","flex"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AAMA;;;;;;;;AATA;AAWO,MAAMA,cAQX,GAAIC,KAAD,IAAW;AACZ,QAAM;AACFC,IAAAA,cADE;AAEFC,IAAAA,uBAAuB,GAAG,GAFxB;AAGFC,IAAAA,sBAAsB,GAAG,GAHvB;AAIFC,IAAAA,KAJE;AAKFC,IAAAA,KALE;AAMFC,IAAAA,IANE;AAOFC,IAAAA,QAPE;AAQFC,IAAAA;AARE,MASFR,KATJ;AAWA,QAAMS,CAAC,GAAG,4BAAW;AACjBR,IAAAA,cADiB;AAEjBG,IAAAA,KAFiB;AAGjBC,IAAAA,KAHiB;AAIjBG,IAAAA,kBAJiB;AAKjBF,IAAAA;AALiB,GAAX,CAAV;AAQA,QAAMI,YAAY,GAAG,6CAAiB,MAAM;AACxC,UAAMC,cAAc,GAAGF,CAAC,CAACG,KAAF,GAAUR,KAAK,GAAGC,KAAzC;AACA,UAAMQ,OAAO,GAAG,CAAC,IAAIV,sBAAL,IAA+BE,KAA/C;AACA,UAAMS,WAAW,GAAGV,KAAK,GAAGS,OAAR,GAAkBA,OAAO,GAAG,CAAhD;AAEA,UAAME,MAAM,GAAG,wCACXN,CAAC,CAACG,KADS,EAEX,CAAC,CAACP,KAAF,EAAS,CAAT,EAAYA,KAAZ,CAFW,EAGX,CAAC,CAAD,EAAIA,KAAJ,EAAW,CAAX,CAHW,EAIXW,mCAAYC,KAJD,CAAf;AAMA,UAAMC,KAAK,GAAG,wCACVT,CAAC,CAACG,KADQ,EAEV,CAAC,CAACP,KAAF,EAAS,CAAT,EAAYA,KAAZ,CAFU,EAGV,CAACF,sBAAD,EAAyB,CAAzB,EAA4BA,sBAA5B,CAHU,EAIVa,mCAAYC,KAJF,CAAd;AAMA,UAAME,iBAAiB,GAAG,wCACtBV,CAAC,CAACG,KADoB,EAEtB,CAAC,CAACP,KAAF,EAAS,CAAT,EAAYA,KAAZ,CAFsB,EAGtB,CAACH,uBAAD,EAA0B,CAA1B,EAA6B,CAACA,uBAA9B,CAHsB,EAItBc,mCAAYC,KAJU,CAA1B;AAMA,WAAO;AACHG,MAAAA,SAAS,EAAE,CACP;AACIC,QAAAA,UAAU,EACNV,cAAc,GAAGG,WAAjB,GAA+BK;AAFvC,OADO,EAKP;AAAED,QAAAA;AAAF,OALO,CADR;AAQHH,MAAAA;AARG,KAAP;AAUH,GAjCoB,EAiClB,CAACT,IAAD,CAjCkB,CAArB;AAmCA,sBACI,6BAAC,8BAAD,CAAU,IAAV;AACI,IAAA,KAAK,EAAE,CACH;AACID,MAAAA,KAAK,EAAG,GAAEF,sBAAsB,GAAG,GAAI,GAD3C;AAEImB,MAAAA,MAAM,EAAG,GAAEnB,sBAAsB,GAAG,GAAI,GAF5C;AAGIoB,MAAAA,SAAS,EAAE;AAHf,KADG,EAMHb,YANG;AADX,kBAUI,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE;AAAEc,MAAAA,IAAI,EAAE;AAAR;AAAb,KAA2BjB,QAA3B,CAVJ,CADJ;AAcH,CA7EM","sourcesContent":["/* eslint-disable react-native/no-inline-styles */\nimport React from 'react';\nimport { View } from 'react-native';\nimport Animated, {\n    Extrapolate,\n    interpolate,\n    useAnimatedStyle,\n} from 'react-native-reanimated';\nimport type { IComputedAnimResult } from 'src/useComputedAnim';\nimport { useOffsetX } from '../useOffsetX';\n\nexport const ParallaxLayout: React.FC<{\n    loop?: boolean;\n    parallaxScrollingOffset?: number;\n    parallaxScrollingScale?: number;\n    handlerOffsetX: Animated.SharedValue<number>;\n    index: number;\n    width: number;\n    computedAnimResult: IComputedAnimResult;\n}> = (props) => {\n    const {\n        handlerOffsetX,\n        parallaxScrollingOffset = 100,\n        parallaxScrollingScale = 0.8,\n        index,\n        width,\n        loop,\n        children,\n        computedAnimResult,\n    } = props;\n\n    const x = useOffsetX({\n        handlerOffsetX,\n        index,\n        width,\n        computedAnimResult,\n        loop,\n    });\n\n    const offsetXStyle = useAnimatedStyle(() => {\n        const baseTranslateX = x.value - index * width;\n        const padding = (1 - parallaxScrollingScale) * width;\n        const extraOffset = index * padding + padding / 2;\n\n        const zIndex = interpolate(\n            x.value,\n            [-width, 0, width],\n            [0, width, 0],\n            Extrapolate.CLAMP\n        );\n        const scale = interpolate(\n            x.value,\n            [-width, 0, width],\n            [parallaxScrollingScale, 1, parallaxScrollingScale],\n            Extrapolate.CLAMP\n        );\n        const relatedTranslateX = interpolate(\n            x.value,\n            [-width, 0, width],\n            [parallaxScrollingOffset, 0, -parallaxScrollingOffset],\n            Extrapolate.CLAMP\n        );\n        return {\n            transform: [\n                {\n                    translateX:\n                        baseTranslateX + extraOffset + relatedTranslateX,\n                },\n                { scale },\n            ],\n            zIndex,\n        };\n    }, [loop]);\n\n    return (\n        <Animated.View\n            style={[\n                {\n                    width: `${parallaxScrollingScale * 100}%`,\n                    height: `${parallaxScrollingScale * 100}%`,\n                    alignSelf: 'center',\n                },\n                offsetXStyle,\n            ]}\n        >\n            <View style={{ flex: 1 }}>{children}</View>\n        </Animated.View>\n    );\n};\n"]}