"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParallaxLayout = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _useOffsetX = require("../useOffsetX");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable react-native/no-inline-styles */
const ParallaxLayout = props => {
  const {
    handlerOffsetX,
    parallaxScrollingOffset = 100,
    parallaxScrollingScale = 0.8,
    index,
    width,
    loop,
    children,
    computedAnimResult
  } = props;
  const x = (0, _useOffsetX.useOffsetX)({
    handlerOffsetX,
    index,
    width,
    computedAnimResult,
    loop
  });
  const offsetXStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    const baseTranslateX = x.value - index * width;
    const padding = (1 - parallaxScrollingScale) * width;
    const extraOffset = index * padding + padding / 2;
    const zIndex = (0, _reactNativeReanimated.interpolate)(x.value, [-width, 0, width], [0, width, 0], _reactNativeReanimated.Extrapolate.CLAMP);
    const scale = (0, _reactNativeReanimated.interpolate)(x.value, [-width, 0, width], [parallaxScrollingScale, 1, parallaxScrollingScale], _reactNativeReanimated.Extrapolate.CLAMP);
    const relatedTranslateX = (0, _reactNativeReanimated.interpolate)(x.value, [-width, 0, width], [parallaxScrollingOffset, 0, -parallaxScrollingOffset], _reactNativeReanimated.Extrapolate.CLAMP);
    return {
      transform: [{
        translateX: baseTranslateX + extraOffset + relatedTranslateX
      }, {
        scale
      }],
      zIndex
    };
  }, [loop]);
  return /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: [{
      width: `${parallaxScrollingScale * 100}%`,
      height: `${parallaxScrollingScale * 100}%`,
      alignSelf: 'center'
    }, offsetXStyle]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      flex: 1
    }
  }, children));
};

exports.ParallaxLayout = ParallaxLayout;
//# sourceMappingURL=ParallaxLayout.js.map