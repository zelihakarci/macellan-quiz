"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCarouselController = useCarouselController;

var _react = _interopRequireDefault(require("react"));

var _reactNativeReanimated = require("react-native-reanimated");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useCarouselController(opts) {
  const {
    width,
    loop,
    handlerOffsetX,
    timingConfig,
    lockController,
    indexController,
    disable = false
  } = opts;

  const canSliding = _react.default.useCallback(() => {
    return !disable && !lockController.isLock();
  }, [lockController, disable]);

  const onScrollEnd = _react.default.useCallback(() => {
    var _opts$onScrollEnd;

    lockController.unLock();
    (_opts$onScrollEnd = opts.onScrollEnd) === null || _opts$onScrollEnd === void 0 ? void 0 : _opts$onScrollEnd.call(opts);
  }, [lockController, opts]);

  const onScrollBegin = _react.default.useCallback(() => {
    var _opts$onScrollBegin;

    (_opts$onScrollBegin = opts.onScrollBegin) === null || _opts$onScrollBegin === void 0 ? void 0 : _opts$onScrollBegin.call(opts);
    lockController.lock();
  }, [lockController, opts]);

  const next = _react.default.useCallback(() => {
    if (!canSliding() || !loop && indexController.index.value === indexController.length - 1) return;
    onScrollBegin === null || onScrollBegin === void 0 ? void 0 : onScrollBegin();
    handlerOffsetX.value = (0, _reactNativeReanimated.withTiming)(handlerOffsetX.value - width, timingConfig, isFinished => {
      if (isFinished) {
        (0, _reactNativeReanimated.runOnJS)(onScrollEnd)();
      }
    });
  }, [onScrollEnd, canSliding, onScrollBegin, width, timingConfig, handlerOffsetX, indexController, loop]);

  const prev = _react.default.useCallback(() => {
    if (!canSliding() || !loop && indexController.index.value === 0) return;
    onScrollBegin === null || onScrollBegin === void 0 ? void 0 : onScrollBegin();
    handlerOffsetX.value = (0, _reactNativeReanimated.withTiming)(handlerOffsetX.value + width, timingConfig, isFinished => {
      if (isFinished) {
        (0, _reactNativeReanimated.runOnJS)(onScrollEnd)();
      }
    });
  }, [onScrollEnd, canSliding, onScrollBegin, width, timingConfig, handlerOffsetX, indexController, loop]);

  const to = _react.default.useCallback((index, animated = false) => {
    if (index === indexController.index.value) return;
    if (!canSliding()) return;
    onScrollBegin === null || onScrollBegin === void 0 ? void 0 : onScrollBegin();
    const offset = handlerOffsetX.value + (indexController.index.value - index) * width;

    if (animated) {
      handlerOffsetX.value = (0, _reactNativeReanimated.withTiming)(offset, timingConfig, isFinished => {
        indexController.index.value = index;

        if (isFinished) {
          (0, _reactNativeReanimated.runOnJS)(onScrollEnd)();
        }
      });
    } else {
      handlerOffsetX.value = offset;
      indexController.index.value = index;
      (0, _reactNativeReanimated.runOnJS)(onScrollEnd)();
    }
  }, [canSliding, onScrollBegin, onScrollEnd, width, timingConfig, indexController, handlerOffsetX]);

  return {
    next,
    prev,
    to
  };
}
//# sourceMappingURL=useCarouselController.js.map